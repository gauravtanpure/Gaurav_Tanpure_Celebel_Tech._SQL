
-- Drop Tables if Exist
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE CUSTOMER_DIM';
EXCEPTION WHEN OTHERS THEN NULL;
END;
/

BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE CUSTOMER_STG';
EXCEPTION WHEN OTHERS THEN NULL;
END;
/

BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE CUSTOMER_HISTORY';
EXCEPTION WHEN OTHERS THEN NULL;
END;
/

-- Create Dimension Table
CREATE TABLE CUSTOMER_DIM (
  CUST_ID NUMBER PRIMARY KEY,
  CUST_NAME VARCHAR2(100),
  ADDRESS VARCHAR2(100),
  PREV_ADDRESS VARCHAR2(100),
  EFFECTIVE_DATE DATE,
  EXPIRY_DATE DATE,
  IS_ACTIVE CHAR(1),
  CHANGE_REASON VARCHAR2(255)
);

-- Create Staging Table
CREATE TABLE CUSTOMER_STG (
  CUST_ID NUMBER,
  CUST_NAME VARCHAR2(100),
  ADDRESS VARCHAR2(100)
);

-- Create History Table for Type 4
CREATE TABLE CUSTOMER_HISTORY AS SELECT * FROM CUSTOMER_DIM WHERE 1=0;

-- Sample Data for Staging
INSERT INTO CUSTOMER_STG (CUST_ID, CUST_NAME, ADDRESS) VALUES (1, 'Alice', 'Pune');
INSERT INTO CUSTOMER_STG (CUST_ID, CUST_NAME, ADDRESS) VALUES (2, 'Bob', 'Mumbai');
INSERT INTO CUSTOMER_STG (CUST_ID, CUST_NAME, ADDRESS) VALUES (3, 'Charlie', 'Delhi');
COMMIT;

-- SCD Type 0
CREATE OR REPLACE PROCEDURE SCD_TYPE_0_PROC IS
BEGIN
  MERGE INTO CUSTOMER_DIM d
  USING CUSTOMER_STG s
  ON (d.CUST_ID = s.CUST_ID)
  WHEN NOT MATCHED THEN
    INSERT (CUST_ID, CUST_NAME, ADDRESS)
    VALUES (s.CUST_ID, s.CUST_NAME, s.ADDRESS);
END;
/

-- SCD Type 1
CREATE OR REPLACE PROCEDURE SCD_TYPE_1_PROC IS
BEGIN
  MERGE INTO CUSTOMER_DIM d
  USING CUSTOMER_STG s
  ON (d.CUST_ID = s.CUST_ID)
  WHEN MATCHED THEN
    UPDATE SET d.CUST_NAME = s.CUST_NAME,
               d.ADDRESS = s.ADDRESS
  WHEN NOT MATCHED THEN
    INSERT (CUST_ID, CUST_NAME, ADDRESS)
    VALUES (s.CUST_ID, s.CUST_NAME, s.ADDRESS);
END;
/

-- SCD Type 2
CREATE OR REPLACE PROCEDURE SCD_TYPE_2_PROC IS
BEGIN
  FOR rec IN (SELECT * FROM CUSTOMER_STG) LOOP
    FOR dim IN (SELECT * FROM CUSTOMER_DIM WHERE CUST_ID = rec.CUST_ID AND IS_ACTIVE = 'Y') LOOP
      IF dim.CUST_NAME != rec.CUST_NAME OR dim.ADDRESS != rec.ADDRESS THEN
        UPDATE CUSTOMER_DIM
        SET EXPIRY_DATE = SYSDATE,
            IS_ACTIVE = 'N'
        WHERE CUST_ID = rec.CUST_ID AND IS_ACTIVE = 'Y';

        INSERT INTO CUSTOMER_DIM (
          CUST_ID, CUST_NAME, ADDRESS,
          EFFECTIVE_DATE, EXPIRY_DATE, IS_ACTIVE
        )
        VALUES (
          rec.CUST_ID, rec.CUST_NAME, rec.ADDRESS,
          SYSDATE, NULL, 'Y'
        );
      END IF;
    END LOOP;

    INSERT INTO CUSTOMER_DIM (
      CUST_ID, CUST_NAME, ADDRESS,
      EFFECTIVE_DATE, IS_ACTIVE
    )
    SELECT rec.CUST_ID, rec.CUST_NAME, rec.ADDRESS, SYSDATE, 'Y'
    FROM DUAL
    WHERE NOT EXISTS (
      SELECT 1 FROM CUSTOMER_DIM WHERE CUST_ID = rec.CUST_ID
    );
  END LOOP;
END;
/

-- SCD Type 3
CREATE OR REPLACE PROCEDURE SCD_TYPE_3_PROC IS
BEGIN
  FOR rec IN (SELECT * FROM CUSTOMER_STG) LOOP
    UPDATE CUSTOMER_DIM
    SET PREV_ADDRESS = ADDRESS,
        ADDRESS = rec.ADDRESS
    WHERE CUST_ID = rec.CUST_ID
      AND ADDRESS != rec.ADDRESS;

    INSERT INTO CUSTOMER_DIM (CUST_ID, CUST_NAME, ADDRESS)
    SELECT rec.CUST_ID, rec.CUST_NAME, rec.ADDRESS
    FROM DUAL
    WHERE NOT EXISTS (
      SELECT 1 FROM CUSTOMER_DIM WHERE CUST_ID = rec.CUST_ID
    );
  END LOOP;
END;
/

-- SCD Type 4
CREATE OR REPLACE PROCEDURE SCD_TYPE_4_PROC IS
BEGIN
  FOR rec IN (SELECT * FROM CUSTOMER_STG) LOOP
    FOR dim IN (SELECT * FROM CUSTOMER_DIM WHERE CUST_ID = rec.CUST_ID) LOOP
      IF dim.ADDRESS != rec.ADDRESS THEN
        INSERT INTO CUSTOMER_HISTORY SELECT * FROM CUSTOMER_DIM WHERE CUST_ID = rec.CUST_ID;

        UPDATE CUSTOMER_DIM
        SET ADDRESS = rec.ADDRESS
        WHERE CUST_ID = rec.CUST_ID;
      END IF;
    END LOOP;

    INSERT INTO CUSTOMER_DIM (CUST_ID, CUST_NAME, ADDRESS)
    SELECT rec.CUST_ID, rec.CUST_NAME, rec.ADDRESS
    FROM DUAL
    WHERE NOT EXISTS (
      SELECT 1 FROM CUSTOMER_DIM WHERE CUST_ID = rec.CUST_ID
    );
  END LOOP;
END;
/

-- SCD Type 6
CREATE OR REPLACE PROCEDURE SCD_TYPE_6_PROC IS
BEGIN
  FOR rec IN (SELECT * FROM CUSTOMER_STG) LOOP
    FOR dim IN (SELECT * FROM CUSTOMER_DIM WHERE CUST_ID = rec.CUST_ID AND IS_ACTIVE = 'Y') LOOP
      IF dim.ADDRESS != rec.ADDRESS THEN
        UPDATE CUSTOMER_DIM
        SET EXPIRY_DATE = SYSDATE,
            IS_ACTIVE = 'N'
        WHERE CUST_ID = rec.CUST_ID AND IS_ACTIVE = 'Y';

        INSERT INTO CUSTOMER_DIM (
          CUST_ID, CUST_NAME, ADDRESS, PREV_ADDRESS,
          EFFECTIVE_DATE, EXPIRY_DATE, IS_ACTIVE
        )
        VALUES (
          rec.CUST_ID, rec.CUST_NAME, rec.ADDRESS, dim.ADDRESS,
          SYSDATE, NULL, 'Y'
        );
      ELSIF dim.CUST_NAME != rec.CUST_NAME THEN
        UPDATE CUSTOMER_DIM
        SET CUST_NAME = rec.CUST_NAME
        WHERE CUST_ID = rec.CUST_ID AND IS_ACTIVE = 'Y';
      END IF;
    END LOOP;

    INSERT INTO CUSTOMER_DIM (
      CUST_ID, CUST_NAME, ADDRESS, EFFECTIVE_DATE, IS_ACTIVE
    )
    SELECT rec.CUST_ID, rec.CUST_NAME, rec.ADDRESS, SYSDATE, 'Y'
    FROM DUAL
    WHERE NOT EXISTS (
      SELECT 1 FROM CUSTOMER_DIM WHERE CUST_ID = rec.CUST_ID
    );
  END LOOP;
END;
/

-- Usage:
-- EXEC SCD_TYPE_1_PROC;
-- SELECT * FROM CUSTOMER_DIM;
-- SELECT * FROM CUSTOMER_HISTORY; -- For SCD Type 4
